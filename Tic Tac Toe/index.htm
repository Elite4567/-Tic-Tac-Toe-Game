<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Tic Tac Toe</title>
  <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
  <link href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css" rel="stylesheet">
  <style>
        body {
      font-family: 'Arial', sans-serif;
      background-color: #f3f3f3;
      display: flex;
      justify-content: center;
      align-items: center;
      height: 100vh;
      margin: 0;
    }

    .container {
      text-align: center;
      display: flex;
      flex-direction: column;
      align-items: center;
    }

    .board {
      display: grid;
      grid-template-columns: repeat(3, 100px);
      grid-template-rows: repeat(3, 100px);
      grid-gap: 5px;
      margin-bottom: 20px;
      border: 2px solid #333; /* Added border for better visualization */
      padding: 2px;
    }

    .cell {
      width: 100px;
      height: 100px;
      border: 1px solid #fff;
      display: flex;
      justify-content: center;
      align-items: center;
      font-size: 24px;
      cursor: pointer;
      transition: all 0.3s ease-in-out;
    }

    .cell:hover {
      background-color: #d1d1d1;
    }

    .status {
      font-size: 18px;
      margin-bottom: 10px;
      color: #333;
    }

    .restart-btn {
      padding: 10px 20px;
      font-size: 16px;
      cursor: pointer;
    }
    
    .winning-cell {
  background-color: yellow;
    }

  </style>
</head>
<body>
  <div class="container">
    <h1 class="mb-4">Tic Tac Toe</h1>
    <div class="board">
      <div class="cell" data-cell-index="0"></div>
      <div class="cell" data-cell-index="1"></div>
      <div class="cell" data-cell-index="2"></div>
      <div class="cell" data-cell-index="3"></div>
      <div class="cell" data-cell-index="4"></div>
      <div class="cell" data-cell-index="5"></div>
      <div class="cell" data-cell-index="6"></div>
      <div class="cell" data-cell-index="7"></div>
      <div class="cell" data-cell-index="8"></div>
    </div>
    <div class="status">Player X's turn</div>
    <button class="restart-btn btn btn-primary">Restart Game</button>
  </div>

  <script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.11.6/dist/umd/popper.min.js"></script>
  <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
  <script>
    const cells = document.querySelectorAll('.cell');
    const status = document.querySelector('.status');
    const restartButton = document.querySelector('.restart-btn');

    let currentPlayer = 'X';
    let gameActive = true;
    let gameState = ['', '', '', '', '', '', '', '', ''];

    const winningConditions = [
      [0, 1, 2],
      [3, 4, 5],
      [6, 7, 8],
      [0, 3, 6],
      [1, 4, 7],
      [2, 5, 8],
      [0, 4, 8],
      [2, 4, 6],
    ];

    const handleCellClick = (clickedCellEvent) => {
      const clickedCell = clickedCellEvent.target;
      const clickedCellIndex = parseInt(clickedCell.getAttribute('data-cell-index'));

      if (gameState[clickedCellIndex] !== '' || !gameActive) {
        return;
      }

      gameState[clickedCellIndex] = currentPlayer;
      clickedCell.textContent = currentPlayer;
      checkWin();
      checkDraw();
      currentPlayer = currentPlayer === 'X' ? 'O' : 'X';
      status.textContent = `Player ${currentPlayer}'s turn`;

      if (gameActive && currentPlayer === 'O') {
        setTimeout(makeAiMove, 500); // Delay AI move for better visualization
      }
    };

   const checkWin = () => {
  for (let i = 0; i < winningConditions.length; i++) {
    const [a, b, c] = winningConditions[i];
    if (gameState[a] !== '' && gameState[a] === gameState[b] && gameState[a] === gameState[c]) {
      gameActive = false;
      status.textContent = `Player ${gameState[a]} wins!`;

      // Add a class to the winning cells to indicate the match
      document.getElementById(`cell-${a}`).classList.add('winning-cell');
      document.getElementById(`cell-${b}`).classList.add('winning-cell');
      document.getElementById(`cell-${c}`).classList.add('winning-cell');
      
      return;
    }
  }
};


    const checkDraw = () => {
      if (!gameState.includes('') && gameActive) {
        gameActive = false;
        status.textContent = "It's a draw!";
      }
    };

    const handleRestart = () => {
      currentPlayer = 'X';
      gameActive = true;
      gameState = ['', '', '', '', '', '', '', '', ''];
      status.textContent = `Player ${currentPlayer}'s turn`;
      cells.forEach((cell) => {
        cell.textContent = '';
      });
    };

    const makeAiMove = () => {
      let bestScore = -Infinity;
      let bestMove;
      for (let i = 0; i < gameState.length; i++) {
        if (gameState[i] === '') {
          gameState[i] = 'O';
          let score = minimax(gameState, 0, false);
          gameState[i] = '';
          if (score > bestScore) {
            bestScore = score;
            bestMove = i;
          }
        }
      }
      gameState[bestMove] = 'O';
      cells[bestMove].textContent = 'O';
      checkWin();
      checkDraw();
      currentPlayer = 'X';
      status.textContent = `Player ${currentPlayer}'s turn`;
    };

    const minimax = (board, depth, isMaximizing) => {
      const result = checkWinner(board);
      if (result !== null) {
        return result === 'X' ? -10 + depth : 10 - depth;
      }

      if (isMaximizing) {
        let bestScore = -Infinity;
        for (let i = 0; i < board.length; i++) {
          if (board[i] === '') {
            board[i] = 'O';
            let score = minimax(board, depth + 1, false);
            board[i] = '';
            bestScore = Math.max(score, bestScore);
          }
        }
        return bestScore;
      } else {
        let bestScore = Infinity;
        for (let i = 0; i < board.length; i++) {
          if (board[i] === '') {
            board[i] = 'X';
            let score = minimax(board, depth + 1, true);
            board[i] = '';
            bestScore = Math.min(score, bestScore);
          }
        }
        return bestScore;
      }
    };

    const checkWinner = (board) => {
      for (let i = 0; i < winningConditions.length; i++) {
        const [a, b, c] = winningConditions[i];
        if (board[a] !== '' && board[a] === board[b] && board[a] === board[c]) {
          return board[a];
        }
      }
      return null;
    };

    cells.forEach((cell) => {
      cell.addEventListener('click', handleCellClick);
    });

    restartButton.addEventListener('click', handleRestart);
  </script>
</body>
</html>
